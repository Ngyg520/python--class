"""
座右铭:路漫漫其修远兮,吾将上下而求索
@project:正课第三周
@author:Mr.Yang
@file:正则表达式.PY
@ide:PyCharm
@time:2018-08-06 16:29:44
"""
import re
#正则表达式:是对字符串的内容进行匹配查询的 一种查询方式,通过预先定义一些特殊字符的组合,形成字符串的匹配规则,再根据这些规则来对字符串中的某一些内容进行提取或者查找
#常用的正则表达式转移字符:
'''
\d:匹配一个数字
\w:用于匹配一个数字或者一个字母
.:可以匹配前面字符后面跟着的任意一个字符(a.:可以匹配到ab,ac,ad)
*:可以匹配前面字符0个或者多个.a*可以匹配到0个或者,aa,aaa,aaaa...
?:可以匹配前面字符0个或者1个.a?:可以匹配到0个a或者1个a
+:可以匹配前面字符前面任意多个,但是至少为一个,不能为0个.a+a,aaaa,aaaaaa:但是不能一个匹配不到
^:表示必须以某字符开头,^a只能匹配以a开头的字符
$:表示必须一某字符结尾,a$:表示只能匹配到以a结尾的
.*:这个组合表示任意字符出现0个或者多个,也称之为贪婪匹配,就是尽可能的匹配符合要求的最大值.(a.*b):可以匹配a-b之间的任意东西(sdsadbjjkas)
.*?:这个组合叫做非贪婪匹配模式,在能匹配成功的前提下,尽可能少的可能匹配
.+:表示任意字符至少出现一次,不能为0次.(a.+b:acb,acdefb)
|:用于设置不同情况的正则表达式,表示或者
'''
#1.创建正则表达式对象,compile( ):括号里面填写的字符串的匹配规则
#()表示从目标字符串中提取的子串,一个()对应着一个分组信息
pattern_obj = re.compile('(\d+)(\w+)')
#2.根据正则表达式对象,从目标字符串中进行匹配
#march():第一个参数,正则表达式对象,第二个参数:目标字符串
res=re.match(pattern_obj,'123456adcefg')
print(res.group(1))
print(res.group(2))#group()里面填分组的记号,
#第二个规则(.)
pattern_obj=re.compile('(c.)')
res=re.match(pattern_obj,'cbdefg')
print('.',res.group(1))
#第三个规则(*)
pattern_obj=re.compile('(a*)')
res=re.match(pattern_obj,'aaaabcdefg')
print('*',res.group(1))
#第四个规则(?)
pattern_obj=re.compile('(a?)')
res=re.match(pattern_obj,'aaaaasbcdefg')
print('?',res.group(1))
#第五个规则(a+)
pattern_obj=re.compile('(a+)')
res=re.match(pattern_obj,'aabdadfwadadbdad')
print(res.group(1))
#第六个规则(^b)
pattern_obj=re.compile('(^a)')
res=re.match(pattern_obj,'adawd')
print('^',res.group(1))
#第七个规则(a$)
pattern_obj=re.compile('(a$)')
res=re.match(pattern_obj,'a')#match从头开始找,所以只能填a
print(res.group(1))
#第八个规则(.*)
pattern_obj=re.compile('(a.*b)')
res=re.match(pattern_obj,'asdsafsdbsadsbadbf')
print('.*',res.group((1)))
#第九个规则(.*?)
pattern_obj=re.compile('(a.*?b)')
res=re.match(pattern_obj,'asdsafsdbsadsbadbf')
print(res.group((1)))
#第十个规则
pattern_obj=re.compile('(a.+b)')
res=re.match(pattern_obj,'asdsafsdbsadsbadbf')
print(res.group((1)))
#第十一个规则(|)
pattern_obj=re.compile('((haha|heihei)123)')
#相当于heihei,heihei123,haha,haha123四中匹配
res=re.match(pattern_obj,'heihei123')
res1=re.match(pattern_obj,'haha123')
print(res.group((1)))
print(res.group((2)))
print(res1.group((1)))
print(res1.group((2)))

